{"mappings":"ACAA,MAAM,EAAO,SAAS,cAAc,CAAC,OAIrC,eAAe,EAAO,CAAG,EACrB,GAAI,CAEA,IAAM,EAAqB,SAAS,aAAa,CAAC,wBAC9C,GACA,EAAmB,MAAM,GAG7B,IAAM,EAAW,MAAM,MAAM,GACvB,EAAO,MAAM,EAAS,IAAI,GAChC,QAAQ,GAAG,CAAC,GAEZ,IAAM,EAAS,EAAK,KAAK,EAAE,IAAI,AAAA,GACpB,CAAC;AACkC,sDAAA,EAAE,EAAK,KAAK,CAAC;A;AAEZ,uDAAA,EAAE,EAAK,IAAI,CAAC;A;AAEnB,gDAAA,EAAE,EAAK,EAAE,CAAC;AACP,mDAAA,EAAE,EAAK,KAAK,CAAC;AACd,kDAAA,EAAE,EAAK,IAAI,CAAC;AACV,oDAAA,EAAE,EAAK,MAAM,CAAC;AACT,yDAAA,EAAE,EAAK,WAAW,CAAC;A;A;AAG9C,8BAAA,CAAC,EACpB,KAAK,IAEJ,EAAU,SAAS,aAAa,CAAC,WACrC,EAAQ,SAAS,CAAC,GAAG,CAAC,SACtB,EAAQ,SAAS,CAAG,EACpB,EAAK,WAAW,CAAC,GAGjB,AAQR,SAA+B,CAAK,CAAE,CAAI,EAEtC,IAAM,EAAqB,SAAS,aAAa,CAAC,OAClD,EAAmB,SAAS,CAAC,GAAG,CAAC,uBAG7B,EAAM,KAAK,EACX,EAAU,EAAoB,UAAW,EAAM,KAAK,EAGpD,EAAM,QAAQ,EACd,EAAU,EAAoB,WAAY,EAAM,QAAQ,EAI5D,IAAM,EAAW,SAAS,aAAa,CAAC,OACxC,CAAA,EAAS,WAAW,CAAG,CAAC,UAAO,EAAE,EAAK,WAAW,CAAC,IAAI,EAAE,EAAK,UAAU,CAAA,CAAE,CACzE,EAAS,KAAK,CAAC,MAAM,CAAG,SACxB,EAAmB,WAAW,CAAC,GAE3B,EAAM,IAAI,EACV,EAAU,EAAoB,YAAa,EAAM,IAAI,EAGrD,EAAM,IAAI,EACV,EAAU,EAAoB,SAAU,EAAM,IAAI,EAItD,EAAmB,KAAK,CAAC,OAAO,CAAG,OACnC,EAAmB,KAAK,CAAC,cAAc,CAAG,SAC1C,EAAmB,KAAK,CAAC,MAAM,CAAG,SAClC,EAAmB,KAAK,CAAC,GAAG,CAAG,OAG/B,EAAK,WAAW,CAAC,EACrB,EA5C8B,EAAK,KAAK,CAAE,EAAK,IAAI,CAE/C,CAAE,MAAO,EAAO,CACZ,QAAQ,KAAK,CAAC,6BAA8B,EAChD,CACJ,CA0CA,SAAS,EAAU,CAAS,CAAE,CAAI,CAAE,CAAG,EACnC,IAAM,EAAS,SAAS,aAAa,CAAC,SACtC,CAAA,EAAO,WAAW,CAAG,EACrB,EAAO,gBAAgB,CAAC,QAAS,KAG7B,AADoB,SAAS,gBAAgB,CAAC,UAClC,OAAO,CAAC,AAAA,GAAW,EAAQ,MAAM,IAG7C,EAAO,EACX,GAGA,EAAO,KAAK,CAAC,OAAO,CAAG,WACvB,EAAO,KAAK,CAAC,eAAe,CAAG,UAC/B,EAAO,KAAK,CAAC,KAAK,CAAG,QACrB,EAAO,KAAK,CAAC,MAAM,CAAG,OACtB,EAAO,KAAK,CAAC,YAAY,CAAG,MAC5B,EAAO,KAAK,CAAC,MAAM,CAAG,UAEtB,EAAU,WAAW,CAAC,EAC1B,CAGA,EA5GU","sources":["<anon>","src/script.js"],"sourcesContent":["const $app = document.getElementById('app');\nlet API = \"https://dragonball-api.com/api/characters?page=0&limit=10\";\n// Function to fetch data from API\nasync function reload(url) {\n    try {\n        // Limpiar solo los controles de paginación existentes (si hay)\n        const existingPagination = document.querySelector('.pagination-controls');\n        if (existingPagination) existingPagination.remove();\n        const response = await fetch(url);\n        const data = await response.json();\n        console.log(data);\n        const output = data.items?.map((item)=>{\n            return `<article class='card'>\n                        <img class='card-images' src=\"${item.image}\"/>\n                        <div class='card-info'>\n                                <h2 class='card-title'>${item.name}</h2>\n                                <ul class='card-items'>\n                                        <li>Ki: ${item.ki}</li>\n                                        <li>MaxKi: ${item.maxKi}</li>\n                                        <li>Race: ${item.race}</li>\n                                        <li>Gender: ${item.gender}</li>\n                                        <li>Affiliation: ${item.affiliation}</li>\n                               </ul>\n                        </div>\n                    </article>`;\n        }).join('');\n        let newItem = document.createElement('section');\n        newItem.classList.add('items');\n        newItem.innerHTML = output;\n        $app.appendChild(newItem);\n        // Agregar controles de paginación después de cargar los personajes\n        addPaginationControls(data.links, data.meta);\n    } catch (error) {\n        console.error(\"Error al cargar los datos:\", error);\n    }\n}\n// Función para agregar controles de paginación\nfunction addPaginationControls(links, meta) {\n    // Crear contenedor para los controles\n    const paginationControls = document.createElement('div');\n    paginationControls.classList.add('pagination-controls');\n    // Botones de navegación\n    if (links.first) addButton(paginationControls, 'Primera', links.first);\n    if (links.previous) addButton(paginationControls, 'Anterior', links.previous);\n    // Información de página actual\n    const pageInfo = document.createElement('span');\n    pageInfo.textContent = `P\\xe1gina ${meta.currentPage} de ${meta.totalPages}`;\n    pageInfo.style.margin = '0 10px';\n    paginationControls.appendChild(pageInfo);\n    if (links.next) addButton(paginationControls, 'Siguiente', links.next);\n    if (links.last) addButton(paginationControls, \"\\xdaltima\", links.last);\n    // Aplicar algunos estilos básicos al contenedor\n    paginationControls.style.display = 'flex';\n    paginationControls.style.justifyContent = 'center';\n    paginationControls.style.margin = '20px 0';\n    paginationControls.style.gap = '10px';\n    // Agregar controles al DOM\n    $app.appendChild(paginationControls);\n}\n// Función para crear botones de paginación\nfunction addButton(container, text, url) {\n    const button = document.createElement('button');\n    button.textContent = text;\n    button.addEventListener('click', ()=>{\n        // Limpia toda la sección de personajes antes de cargar una nueva página\n        const allSections = document.querySelectorAll('.items');\n        allSections.forEach((section)=>section.remove());\n        // Carga la nueva página\n        reload(url);\n    });\n    // Estilos básicos para el botón\n    button.style.padding = '8px 15px';\n    button.style.backgroundColor = '#4CAF50';\n    button.style.color = 'white';\n    button.style.border = 'none';\n    button.style.borderRadius = '4px';\n    button.style.cursor = 'pointer';\n    container.appendChild(button);\n}\n// Iniciar carga de datos\nreload(API);\n\n//# sourceMappingURL=characters.43e5e70e.js.map\n","const $app = document.getElementById('app');\nlet API = \"https://dragonball-api.com/api/characters?page=0&limit=10\";\n\n// Function to fetch data from API\nasync function reload(url) {\n    try {\n        // Limpiar solo los controles de paginación existentes (si hay)\n        const existingPagination = document.querySelector('.pagination-controls');\n        if (existingPagination) {\n            existingPagination.remove();\n        }\n        \n        const response = await fetch(url);\n        const data = await response.json();\n        console.log(data);\n\n        const output = data.items?.map(item => {\n            return `<article class='card'>\n                        <img class='card-images' src=\"${item.image}\"/>\n                        <div class='card-info'>\n                                <h2 class='card-title'>${item.name}</h2>\n                                <ul class='card-items'>\n                                        <li>Ki: ${item.ki}</li>\n                                        <li>MaxKi: ${item.maxKi}</li>\n                                        <li>Race: ${item.race}</li>\n                                        <li>Gender: ${item.gender}</li>\n                                        <li>Affiliation: ${item.affiliation}</li>\n                               </ul>\n                        </div>\n                    </article>`;\n        }).join('');\n\n        let newItem = document.createElement('section');\n        newItem.classList.add('items');\n        newItem.innerHTML = output;\n        $app.appendChild(newItem);\n        \n        // Agregar controles de paginación después de cargar los personajes\n        addPaginationControls(data.links, data.meta);\n        \n    } catch (error) {\n        console.error(\"Error al cargar los datos:\", error);\n    }\n}\n\n// Función para agregar controles de paginación\nfunction addPaginationControls(links, meta) {\n    // Crear contenedor para los controles\n    const paginationControls = document.createElement('div');\n    paginationControls.classList.add('pagination-controls');\n    \n    // Botones de navegación\n    if (links.first) {\n        addButton(paginationControls, 'Primera', links.first);\n    }\n    \n    if (links.previous) {\n        addButton(paginationControls, 'Anterior', links.previous);\n    }\n    \n    // Información de página actual\n    const pageInfo = document.createElement('span');\n    pageInfo.textContent = `Página ${meta.currentPage} de ${meta.totalPages}`;\n    pageInfo.style.margin = '0 10px';\n    paginationControls.appendChild(pageInfo);\n    \n    if (links.next) {\n        addButton(paginationControls, 'Siguiente', links.next);\n    }\n    \n    if (links.last) {\n        addButton(paginationControls, 'Última', links.last);\n    }\n    \n    // Aplicar algunos estilos básicos al contenedor\n    paginationControls.style.display = 'flex';\n    paginationControls.style.justifyContent = 'center';\n    paginationControls.style.margin = '20px 0';\n    paginationControls.style.gap = '10px';\n    \n    // Agregar controles al DOM\n    $app.appendChild(paginationControls);\n}\n\n// Función para crear botones de paginación\nfunction addButton(container, text, url) {\n    const button = document.createElement('button');\n    button.textContent = text;\n    button.addEventListener('click', () => {\n        // Limpia toda la sección de personajes antes de cargar una nueva página\n        const allSections = document.querySelectorAll('.items');\n        allSections.forEach(section => section.remove());\n        \n        // Carga la nueva página\n        reload(url);\n    });\n    \n    // Estilos básicos para el botón\n    button.style.padding = '8px 15px';\n    button.style.backgroundColor = '#4CAF50';\n    button.style.color = 'white';\n    button.style.border = 'none';\n    button.style.borderRadius = '4px';\n    button.style.cursor = 'pointer';\n    \n    container.appendChild(button);\n}\n\n// Iniciar carga de datos\nreload(API);"],"names":["$app","document","getElementById","reload","url","existingPagination","querySelector","remove","response","fetch","data","json","console","log","output","items","map","item","image","name","ki","maxKi","race","gender","affiliation","join","newItem","createElement","classList","add","innerHTML","appendChild","addPaginationControls","links","meta","paginationControls","first","addButton","previous","pageInfo","textContent","currentPage","totalPages","style","margin","next","last","display","justifyContent","gap","error","container","text","button","addEventListener","allSections","querySelectorAll","forEach","section","padding","backgroundColor","color","border","borderRadius","cursor"],"version":3,"file":"characters.43e5e70e.js.map"}