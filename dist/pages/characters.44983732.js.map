{"mappings":"AAAA,MAAM,OAAO,SAAS,cAAc,CAAC;AACrC,IAAI,MAAM;AAEV,kCAAkC;AAClC,eAAe,OAAO,GAAG;IACrB,IAAI;QACA,+DAA+D;QAC/D,MAAM,qBAAqB,SAAS,aAAa,CAAC;QAClD,IAAI,oBACA,mBAAmB,MAAM;QAG7B,MAAM,WAAW,MAAM,MAAM;QAC7B,MAAM,OAAO,MAAM,SAAS,IAAI;QAChC,QAAQ,GAAG,CAAC;QAEZ,MAAM,SAAS,KAAK,KAAK,EAAE,IAAI,CAAA;YAC3B,OAAO,CAAC;sDACkC,EAAE,KAAK,KAAK,CAAC;;uDAEZ,EAAE,KAAK,IAAI,CAAC;;gDAEnB,EAAE,KAAK,EAAE,CAAC;mDACP,EAAE,KAAK,KAAK,CAAC;kDACd,EAAE,KAAK,IAAI,CAAC;oDACV,EAAE,KAAK,MAAM,CAAC;yDACT,EAAE,KAAK,WAAW,CAAC;;;8BAG9C,CAAC;QACvB,GAAG,KAAK;QAER,IAAI,UAAU,SAAS,aAAa,CAAC;QACrC,QAAQ,SAAS,CAAC,GAAG,CAAC;QACtB,QAAQ,SAAS,GAAG;QACpB,KAAK,WAAW,CAAC;QAEjB,mEAAmE;QACnE,sBAAsB,KAAK,KAAK,EAAE,KAAK,IAAI;IAE/C,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,8BAA8B;IAChD;AACJ;AAEA,+CAA+C;AAC/C,SAAS,sBAAsB,KAAK,EAAE,IAAI;IACtC,sCAAsC;IACtC,MAAM,qBAAqB,SAAS,aAAa,CAAC;IAClD,mBAAmB,SAAS,CAAC,GAAG,CAAC;IAEjC,wBAAwB;IACxB,IAAI,MAAM,KAAK,EACX,UAAU,oBAAoB,WAAW,MAAM,KAAK;IAGxD,IAAI,MAAM,QAAQ,EACd,UAAU,oBAAoB,YAAY,MAAM,QAAQ;IAG5D,+BAA+B;IAC/B,MAAM,WAAW,SAAS,aAAa,CAAC;IACxC,SAAS,WAAW,GAAG,CAAC,UAAO,EAAE,KAAK,WAAW,CAAC,IAAI,EAAE,KAAK,UAAU,EAAE;IACzE,SAAS,KAAK,CAAC,MAAM,GAAG;IACxB,mBAAmB,WAAW,CAAC;IAE/B,IAAI,MAAM,IAAI,EACV,UAAU,oBAAoB,aAAa,MAAM,IAAI;IAGzD,IAAI,MAAM,IAAI,EACV,UAAU,oBAAoB,aAAU,MAAM,IAAI;IAGtD,gDAAgD;IAChD,mBAAmB,KAAK,CAAC,OAAO,GAAG;IACnC,mBAAmB,KAAK,CAAC,cAAc,GAAG;IAC1C,mBAAmB,KAAK,CAAC,MAAM,GAAG;IAClC,mBAAmB,KAAK,CAAC,GAAG,GAAG;IAE/B,2BAA2B;IAC3B,KAAK,WAAW,CAAC;AACrB;AAEA,2CAA2C;AAC3C,SAAS,UAAU,SAAS,EAAE,IAAI,EAAE,GAAG;IACnC,MAAM,SAAS,SAAS,aAAa,CAAC;IACtC,OAAO,WAAW,GAAG;IACrB,OAAO,gBAAgB,CAAC,SAAS;QAC7B,wEAAwE;QACxE,MAAM,cAAc,SAAS,gBAAgB,CAAC;QAC9C,YAAY,OAAO,CAAC,CAAA,UAAW,QAAQ,MAAM;QAE7C,wBAAwB;QACxB,OAAO;IACX;IAEA,gCAAgC;IAChC,OAAO,KAAK,CAAC,OAAO,GAAG;IACvB,OAAO,KAAK,CAAC,eAAe,GAAG;IAC/B,OAAO,KAAK,CAAC,KAAK,GAAG;IACrB,OAAO,KAAK,CAAC,MAAM,GAAG;IACtB,OAAO,KAAK,CAAC,YAAY,GAAG;IAC5B,OAAO,KAAK,CAAC,MAAM,GAAG;IAEtB,UAAU,WAAW,CAAC;AAC1B;AAEA,yBAAyB;AACzB,OAAO","sources":["src/script.js"],"sourcesContent":["const $app = document.getElementById('app');\nlet API = \"https://dragonball-api.com/api/characters?page=0&limit=10\";\n\n// Function to fetch data from API\nasync function reload(url) {\n    try {\n        // Limpiar solo los controles de paginación existentes (si hay)\n        const existingPagination = document.querySelector('.pagination-controls');\n        if (existingPagination) {\n            existingPagination.remove();\n        }\n        \n        const response = await fetch(url);\n        const data = await response.json();\n        console.log(data);\n\n        const output = data.items?.map(item => {\n            return `<article class='card'>\n                        <img class='card-images' src=\"${item.image}\"/>\n                        <div class='card-info'>\n                                <h2 class='card-title'>${item.name}</h2>\n                                <ul class='card-items'>\n                                        <li>Ki: ${item.ki}</li>\n                                        <li>MaxKi: ${item.maxKi}</li>\n                                        <li>Race: ${item.race}</li>\n                                        <li>Gender: ${item.gender}</li>\n                                        <li>Affiliation: ${item.affiliation}</li>\n                               </ul>\n                        </div>\n                    </article>`;\n        }).join('');\n\n        let newItem = document.createElement('section');\n        newItem.classList.add('items');\n        newItem.innerHTML = output;\n        $app.appendChild(newItem);\n        \n        // Agregar controles de paginación después de cargar los personajes\n        addPaginationControls(data.links, data.meta);\n        \n    } catch (error) {\n        console.error(\"Error al cargar los datos:\", error);\n    }\n}\n\n// Función para agregar controles de paginación\nfunction addPaginationControls(links, meta) {\n    // Crear contenedor para los controles\n    const paginationControls = document.createElement('div');\n    paginationControls.classList.add('pagination-controls');\n    \n    // Botones de navegación\n    if (links.first) {\n        addButton(paginationControls, 'Primera', links.first);\n    }\n    \n    if (links.previous) {\n        addButton(paginationControls, 'Anterior', links.previous);\n    }\n    \n    // Información de página actual\n    const pageInfo = document.createElement('span');\n    pageInfo.textContent = `Página ${meta.currentPage} de ${meta.totalPages}`;\n    pageInfo.style.margin = '0 10px';\n    paginationControls.appendChild(pageInfo);\n    \n    if (links.next) {\n        addButton(paginationControls, 'Siguiente', links.next);\n    }\n    \n    if (links.last) {\n        addButton(paginationControls, 'Última', links.last);\n    }\n    \n    // Aplicar algunos estilos básicos al contenedor\n    paginationControls.style.display = 'flex';\n    paginationControls.style.justifyContent = 'center';\n    paginationControls.style.margin = '20px 0';\n    paginationControls.style.gap = '10px';\n    \n    // Agregar controles al DOM\n    $app.appendChild(paginationControls);\n}\n\n// Función para crear botones de paginación\nfunction addButton(container, text, url) {\n    const button = document.createElement('button');\n    button.textContent = text;\n    button.addEventListener('click', () => {\n        // Limpia toda la sección de personajes antes de cargar una nueva página\n        const allSections = document.querySelectorAll('.items');\n        allSections.forEach(section => section.remove());\n        \n        // Carga la nueva página\n        reload(url);\n    });\n    \n    // Estilos básicos para el botón\n    button.style.padding = '8px 15px';\n    button.style.backgroundColor = '#4CAF50';\n    button.style.color = 'white';\n    button.style.border = 'none';\n    button.style.borderRadius = '4px';\n    button.style.cursor = 'pointer';\n    \n    container.appendChild(button);\n}\n\n// Iniciar carga de datos\nreload(API);"],"names":[],"version":3,"file":"characters.44983732.js.map","sourceRoot":"/__parcel_source_root/"}